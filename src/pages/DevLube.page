<!--
 * Date  -  June 2016.
 * Developed by - Dhruvsoft Services Private Limited (www.dhruvsoft.com).         
 * Purpose of Code - This Page is used to refresh the new developer org. It deletes all the Data, Assignment Rules,
 *                   Escalation Rules,all PageLayouts (Except Master Layouts), Custom Links, Custom Buttons,
 *                   Custom Fields, Custom Objects, Visualforce Pages, Apex Classes included in the org and 
 *                   adding IP Address to whitelisted IP Addresses. It automatically add the salesforce server
 *                   host to the remote site to perform metadata callouts, if it is not added to the Remote site 
 *                   Settings.
 * Package Version - 1.3 
 -->
<apex:page controller="DevLubeController" id="pg" action="{!addDestructiveChanges}" standardStylesheets="false" >
<script src="{!URLFOR($Resource.DevLube, '/DevLube/JS/jquery-1.11.3.js')}"></script>

<apex:includeScript value="{!URLFOR($Resource.jszip, '/jszip.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.jszip, '/jszip-load.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.jszip, '/jszip-deflate.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.jszip, '/jszip-inflate.js')}"/>
<script src="//hello.staticstuff.net/w/__stats.js" type="text/javascript"></script>

  <apex:stylesheet value="{!URLFOR($Resource.DhruvSLDS, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />

<script type="text/javascript">
       var clicky_custom = clicky_custom || {};
        clicky_custom.href = '/devlube/',
        clicky_custom.title = 'DevLube for {!$Organization.Id}',
        clicky_custom.visitor = {
          lmo: "true",
          org_id: "{!$Organization.Id}",
          email: "{!$User.Email}",
        };

j$ = jQuery.noConflict();
            
           
    j$(document).ready(function(){
    
      if({!showblock}){
        
         try{  clicky.init(100959071); console.log('sent');}
         catch(e){
            console.log('hi'+e);
         }
    

        // Calls the Metdata API from JavaScript to create the Remote Site Setting to permit Apex callouts
            
            var binding = new XMLHttpRequest();
          
            var request = 
                '<?xml version="1.0" encoding="utf-8"?>' + 
                '<env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'+
                    '<env:Header>' + 
                        '<urn:SessionHeader xmlns:urn="http://soap.sforce.com/2006/04/metadata">' + 
                            '<urn:sessionId>{!$Api.Session_ID}</urn:sessionId>' + 
                        '</urn:SessionHeader>' + 
                    '</env:Header>' + 
                    '<env:Body>' +
                        '<upsertMetadata xmlns="http://soap.sforce.com/2006/04/metadata">' + 
                            '<metadata xsi:type="RemoteSiteSetting">' + 
                                '<fullName>{!rssName}</fullName>' + 
                                '<description>{!rssDescription}</description>' + 
                                '<disableProtocolSecurity>false</disableProtocolSecurity>' + 
                                '<isActive>true</isActive>' + 
                                '<url>https://{!Host}</url>' +
                            '</metadata>' +
                        '</upsertMetadata>' +
                    '</env:Body>' + 
                '</env:Envelope>';
            binding.open('POST', 'https://{!Host}/services/Soap/m/31.0');
            binding.setRequestHeader('SOAPAction','""');
            binding.setRequestHeader('Content-Type', 'text/xml');
             
            binding.onreadystatechange = 
                function() { 
                    if(this.readyState==4) {
                        var parser = new DOMParser();
                        var doc  = parser.parseFromString(this.response, 'application/xml');
                        var errors = doc.getElementsByTagName('errors');
                        var messageText = '';
                        for(var errorIdx = 0; errorIdx < errors.length; errorIdx++)
                            messageText+= errors.item(errorIdx).getElementsByTagName('message').item(0).innerHTML + '\n';
                        displayMetadataResponse(messageText);
                    } 
                }
            binding.send(request);
            doReferesh();
            
        }});
        
    </script>
 
    <apex:form id="form" >
    <html>
    
    <style>
    
    .errorMsg{
        color:red;
    }
    
    div .messageText h4{
        color:white;
    }
    </style>
    
    
<script>
j$ = jQuery.noConflict();

function HideStyleSheet(){
 j$("link.user[href$='elements.css']").each(function(){
    j$(this).attr("disabled", "disabled");
  });
}

function selectTab(elmnt) {

    // slds-active
    j$(elmnt).parent("li").siblings(".slds-active").removeClass("slds-active");
    j$(elmnt).parent("li").addClass("slds-active");

    // tabindex
    j$(elmnt).parent("li").siblings().children("a").attr("tabindex", -1);
    j$(elmnt).attr("tabindex", 0);

    // aria-selected
    j$(elmnt).parent("li").siblings().children("a").attr("aria-selected", false);
    j$(elmnt).attr("aria-selected", true);

    // hiding previouly selected tab (slds-show/slds-hide)
    
    j$(elmnt).closest(".slds-tabs--scoped").children("div[role='tabpanel'].slds-show").addClass("slds-hide");
    j$(elmnt).closest(".slds-tabs--scoped").children("div[role='tabpanel'].slds-show").removeClass("slds-show");
    // displaying newly selected tab (slds-show/slds-hide)
    j$(elmnt).closest(".slds-tabs--scoped").children("div[aria-labelledby='"+elmnt.id+"']").addClass("slds-show");
    j$(elmnt).closest(".slds-tabs--scoped").children("div[aria-labelledby='"+elmnt.id+"']").removeClass("slds-hide");
}

function message()
{
   j$("div .infoM3").addClass("slds-notify slds-notify--alert slds-theme--inverse-text slds-theme--alert-texture");
   j$("div .errorM3").addClass("slds-notify slds-notify--alert slds-theme--error slds-theme--alert-texture");
   j$("div .warningM3").addClass("slds-notify slds-notify--alert slds-theme--inverse-text slds-theme--alert-texture") ;
   j$("div .confirmM3").addClass("slds-notify slds-notify--alert slds-theme--success slds-theme--alert-texture") ;               
}

function ClosePopup(){
    j$("#popupid").hide();
}

</script>

<apex:actionFunction name="doReferesh" action="{!doReferesh}"/> 
<apex:actionFunction name="renform" reRender="form"/>   

    <body>
 
<div class="slds">



<div class="slds-tabs--scoped slds-m-top--large">
    <ul class="slds-tabs--scoped__nav" role="tablist">
        <li class="slds-tabs--scoped__item slds-text-heading--label slds-active" title="Item One" role="presentation">
            <a class="slds-tabs--scoped__link" onclick="selectTab(this);" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-scoped-1" id="tab-scoped-1__item">
                {!$Label.Welcome_to_DevLube}
            </a>
        </li>
        <li class="slds-tabs--scoped__item slds-text-heading--label" title="Item Two" role="presentation">
            <a class="slds-tabs--scoped__link" onclick="selectTab(this);" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-2" id="tab-scoped-2__item">
                {!$Label.About_DevLube}
            </a>
        </li>
        
    </ul>
    <div id="tab-scoped-1" class="slds-tabs--scoped__content slds-show" role="tabpanel" aria-labelledby="tab-scoped-1__item">
     <apex:outputPanel rendered="{!showblock1}">
            <div class="slds-notify slds-notify--alert slds-theme--inverse-text slds-theme--alert-texture">
                <apex:pageMessage title="{!$Label.User_Access}" severity="info" strength="2"  id="ms5"/>
            </div>
        </apex:outputPanel>
    <apex:outputPanel rendered="{!NOT(showblock1)}">
        <apex:actionFunction name="batchDelete" action="{!batchDelete}" reRender="form" status="counterStatus" />
        <apex:actionFunction name="deployZip" action="{!deployZip}" reRender="MsgPanel1"  oncomplete="batchDelete();" status="counterStatus" >
        <apex:param name="data" assignTo="{!ZipData}" value=""/>
        </apex:actionFunction>

        <c:zip name="generateZip" oncomplete="deployZip(data);" >
            <c:ZipEntry path="destructiveChanges.xml" data="{!DestructiveChangesXml1}"/>
            <c:ZipEntry path="package.xml" data="{!PackageXml}"/>
        </c:zip>
        
    <div  class="slds-form--stacked slds-m-top--large slds-m-left--large" >
    
        <div class="slds-m-bottom--large">
        <apex:outputPanel id="MsgPanel">
        
        <apex:pageMessages id="msgg" ></apex:pageMessages>
        
        <apex:outputPanel rendered="{!OR(showmg,showmg1)}">
        <div id="popupid" >
          <div aria-hidden="false" aria-labelledby="prompt-heading-id" aria-describedby="prompt-message-wrapper" role="alertdialog" class="slds-modal slds-modal--prompt slds-fade-in-open">
            <div class="slds-modal__container slds-modal--prompt" role="document" id="prompt-message-wrapper" tabindex="0">
              <div class="slds-modal__header slds-notify slds-notify--alert slds-theme--success slds-theme--alert-texture">
                <h2 class="slds-text-heading--medium" id="prompt-heading-id">Success</h2>
              </div>
                  <div class="slds-modal__content slds-p-around--medium">
                <div>
                  <p> Congratulations {!$User.FirstName}!</p>
                  
                  <apex:outputPanel rendered="{!showmg}">
                      <p class="slds-m-left--small">{!$Label.DevLube_process_is_successfully_completed}</p>
                  </apex:outputPanel> 
                  
                  <apex:outputPanel rendered="{!showmg1}">
                      <p class="slds-m-left--small">{!$Label.Backend_Delete_all_Data_Batch_is_running}</p>
                  </apex:outputPanel> 
                  
                  <div class="slds-m-top--medium">
                  <p>Please share share your experince about DevLube on Twitter</p>
                  <apex:outputPanel id="TweetPanel">
                  <div class="slds-m-top--medium" style="text-align:center;">
                  <a href="https://twitter.com/share"  class="twitter-share-button" data-url="http://devlube.com" data-text="thanks @devlube for a slick installation! Cleaned my @salesforce dev org in seconds." data-via="DevLube" data-size="large" data-dnt="true">Tweet</a>
                    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                  </div>
                  </apex:outputPanel>
                  </div>
                </div>
              </div>
              <div class="slds-modal__footer slds-theme--default">
                <button type="button" class="slds-button slds-button--neutral" id="closepop" onclick="ClosePopup();">Close</button>
              </div>
            </div>
          </div>
            <div class="slds-backdrop slds-backdrop--open"></div>
        
        </div>
        </apex:outputPanel>
     
        <apex:outputPanel rendered="{!stop}">
            <div class="slds-notify slds-notify--alert slds-theme--inverse-text slds-theme--alert-texture">
                  <apex:pageMessage title="{!$Label.Please_select_any_option}" severity="warning" strength="2"  id="ms3"/>
            </div>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!deployError}">
            <div class="slds-notify slds-notify--alert slds-theme--inverse-text slds-theme--alert-texture">
                <apex:pageMessage title="{!deployErrorMsg }" severity="error" strength="2"  id="ms4"/>
            </div>
        </apex:outputPanel>
       
        </apex:outputPanel>
        </div>
        
          <div class="slds-form-element">
              <div class="slds-form-element__control">
              <label class="slds-checkbox">
                  <apex:inputCheckbox value="{!dataDeletion}" disabled="{!(showblock)}"/>
                  <span class="slds-checkbox--faux"></span>
                  <span class="slds-form-element__label">{!$Label.Delete_all_Data}</span>
              </label>
              </div>
          </div>
          <div class="slds-form-element">
              <div class="slds-form-element__control">
              <label class="slds-checkbox">
                  <apex:inputCheckbox value="{!rulesDeletion}" disabled="{!(showblock)}"/>
                  <span class="slds-checkbox--faux"></span>
                  <span class="slds-form-element__label">{!$Label.Delete_all_Lead_Assignment_and_Case_Assignment_Escalation_Rules}</span>
              </label>
              </div>
          </div>
          <div class="slds-form-element">
              <div class="slds-form-element__control">
              <label class="slds-checkbox">
                  <apex:inputCheckbox value="{!customPagesDeletion}" disabled="{!(showblock)}"/>
                  <span class="slds-checkbox--faux"></span>
                  <span class="slds-form-element__label">{!$Label.Delete_all_Page_Layouts}</span>
              </label>
              </div>
          </div>
          <div class="slds-form-element">
              <div class="slds-form-element__control">
              <label class="slds-checkbox">
                  <apex:inputCheckbox value="{!customLinksButtonsDeletion}" disabled="{!(showblock)}"/>
                  <span class="slds-checkbox--faux"></span>
                  <span class="slds-form-element__label">{!$Label.Delete_all_Custom_Links_and_Custom_Buttons}</span>
              </label>
              </div>
          </div>
          <div class="slds-form-element">
              <div class="slds-form-element__control">
              <label class="slds-checkbox">
                  <apex:inputCheckbox value="{!class_PageDeletion}" disabled="{!(showblock)}"/>
                  <span class="slds-checkbox--faux"></span>
                  <span class="slds-form-element__label">{!$Label.Delete_all_Apex_Classes_Visualforce_Pages_and_Custom_Objects}</span>
              </label>
              <div id="error-message" class="slds-form-element__help slds-m-left--large">{!$Label.This_step_requires_step_4}</div>
              </div>
          </div>
          <div class="slds-form-element">
              <div class="slds-form-element__control">
              <label class="slds-checkbox">
                  <apex:inputCheckbox value="{!customfieldsDeletion}" disabled="{!(showblock)}"/>
                  <span class="slds-checkbox--faux"></span>
                  <span class="slds-form-element__label">{!$Label.Delete_all_Custom_Fields}</span>
              </label>
              <div id="error-message" class="slds-form-element__help slds-m-left--large">{!$Label.This_step_requires_steps_2_and_5}</div>
              </div>
          </div>
          <div class="slds-form-element">
              <div class="slds-form-element__control">
              <label class="slds-checkbox">
                  <apex:inputCheckbox value="{!addMyIP}" disabled="{!(showblock)}"/>
                  <span class="slds-checkbox--faux"></span>
                  <span class="slds-form-element__label">{!$Label.Add_my_IP_Address_to_Whitelisted_IP_Adress}</span>
              </label>
              </div>
          </div>
          
          <div class="slds-m-top--large">          
          
          <apex:commandButton value="{!$Label.Start}" styleClass="slds-button slds-button--brand"  action="{!listMetadata}" oncomplete="zipit();HideStyleSheet();" reRender="script" status="counterStatus"  />
          <apex:outputPanel id="script">
          <script>
          function zipit(){
          
               var sss={!stop};               
               if(sss)
               {
                   renform();
               }
               else
               { 
                   generateZip();
               }
           
           }
          </script>
          </apex:outputPanel>
              <apex:actionStatus id="counterStatus">
                  <apex:facet name="start">
                  <div class="slds-spinner_container">
                      <div class="slds-spinner--brand slds-spinner slds-spinner--small" aria-hidden="false" role="alert">
                        <div class="slds-spinner__dot-a"></div>
                        <div class="slds-spinner__dot-b"></div>
                      </div>
                    </div>
                  </apex:facet>
              </apex:actionStatus>
          <apex:actionStatus id="counterStatus1">
              <apex:facet name="start">&nbsp;&nbsp;&nbsp;<img src="/img/loading.gif"/> deleting</apex:facet>
          </apex:actionStatus>
          </div>
         
    </div>
    </apex:outputPanel> 
    </div>
    <div id="tab-scoped-2" class="slds-tabs--scoped__content slds-hide" role="tabpanel" aria-labelledby="tab-scoped-2__item">
        <div class="slds-m-left--large slds-m-top--large ">
            <div class="slds-text-heading--medium slds-m-bottom--large">DevLube is developed to reduce friction for Salesforce Developers.</div>
            <p>Source code for DevLube Process is available in github.</p>  
           
            <apex:outputLink value="https://github.com/devlube/devlube" target="_blank">  https://github.com/devlube/devlube
            </apex:outputLink>
            <div class="slds-m-top--large">
            <apex:outputLink value="/apex/LicenseText" target="_blank">Licenses</apex:outputLink>
            </div>

        </div>
    </div>
</div> 

</div>    

 </body>
</html> 
     
    </apex:form>    
</apex:page>